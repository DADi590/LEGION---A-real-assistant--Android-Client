------------Normal permissions------------

android.permission.RECEIVE_BOOT_COMPLETED
- Start the app at device boot

android.permission.FOREGROUND_SERVICE
- Run the Main Service (and any other(s)) in foreground as of API 28

android.permission.ACCESS_NOTIFICATION_POLICY
- To be able to change the Interruption Filter

android.permission.EXPAND_STATUS_BAR
- To be able to collapse the status bar for the PLS

android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS
- So the app can still work even in battery optimization modes, like Ultra Power Saver Mode in Samsung smartphones

android.permission.INTERNET
- So the app can ping devices on the same network to attempt to get the distance between the device where the app is
  installed and the other devices (to locate the app device inside a building - very useful for the alarms system)

android.permission.BLUETOOTH
android.permission.BLUETOOTH_ADMIN
android.permission.BLUETOOTH_SCAN
- So the app can discover nearby Bluetooth devices. Useful currently to detect the relative location of the device

android.permission.CHANGE_WIFI_STATE
- To be able to toggle the Wi-Fi state on and off

android.permission.ACCESS_WIFI_STATE
- To be able to get the Wi-Fi state

------------Dangerous permissions------------

android.permission.RECEIVE_SMS
- Warn about new SMS

android.permission.RECORD_AUDIO
- Allow the user to put the app recording audio

android.permission.WRITE_EXTERNAL_STORAGE
- Write files to the external storage

android.permission.READ_PHONE_STATE
- To get phone state changes for PhoneCallProcessor

android.permission.READ_CALL_LOG
- To get the number that comes with the phone state change, as stated in Android Developers website

android.permission.READ_CONTACTS
- To read the phone contacts (so the assistant can know who is calling or sending the message)

android.permission.ACCESS_COARSE_LOCATION
android.permission.ACCESS_FINE_LOCATION
android.permission.ACCESS_BACKGROUND_LOCATION
- For the alarms system to know where the user is at the moment to fire the alarm at the right time

------------AppOps permissions------------

android.permission.SYSTEM_ALERT_WINDOW
- To be able to draw a window above everything to block status and virtual buttons bar access with the Protected Lock
Screen

------------Privileged apps' permissions------------

android.permission.CAPTURE_AUDIO_OUTPUT
android.permission.CAPTURE_MEDIA_OUTPUT
android.permission.CAPTURE_VOICE_COMMUNICATION_OUTPUT
- To be able to record audio from any audio source desired

android.permission.READ_PRECISE_PHONE_STATE
- To receive changes of the phone state with precise phone states, as opposite to the more generic ones from
  android.permission.READ_PHONE_STATE

android.permission.LOCK_DEVICE
- To be able to lock the device even without the app being a Device Administrator (only from Android 11 onwards)

------------Verifier permissions------------

android.permission.GRANT_RUNTIME_PERMISSIONS
- To be able to grant runtime permissions --> which means force permissions to be granted

------------Installer permissions------------

android.permission.INTERACT_ACROSS_USERS_FULL
- To be able to grant runtime permissions for all users from inside any user


------------My permissions------------

@Deprecated - if I declare the permissions, if any app uninstalls this app, installs some app that declares these
permissions, and then the user attempts to install this app on Lollipop and above, they won't be able to, since they'll
get a duplicate permissions error. So no custom permissions. Safer, I guess.

These permissions, whatever they do, are just for precautions. They'll be used to be more sure of something, but the
app will NOT rely on them. Some other method will be made to do whatever they were supposed to do if there weren't
vulnerabilities on them.

com.dadi590.assist_c_a.permission.INTERNAL_RECEIVERS
- This permission is to ensure that no other app receives internal communications of this app through broadcasts.
  Communication with other apps developed by me will be handled some other way, since this one is vulnerable.

  Note that there may be vulnerabilities and other apps could get the broadcasts. But still, this should make it harder.
  It's just a precaution, because all broadcasts are sent with a requirement that this must be the app receiving them.

com.dadi590.assist_c_a.permission.INCOMING_EXT_COMMS
- This permission exists for no other app to be able to communicate with this one, in the components that declare this
  permission (or that inherit it). Communication with other apps developed by me will be handled some other way, since
  this one is vulnerable.

  Note that there may be vulnerabilities and other apps could communicate with this one. Though, this is just as
  a precaution, because all internal components will be prepared to handle exactly no communications from outside, and
  all external components will be made sure they know how to handle whatever comes to them, being it trusted or not.


------------SuperSU permission------------

android.permission.ACCESS_SUPERUSER
- From https://su.chainfire.eu/#updates-permission:
  "X.4. ACCESS_SUPERUSER permission DEPRECATED
  Due to changes in Android 5.0 Lollipop, this permission has been deprecated and is completely ignored from SuperSU
  v2.30 onwards
  From SuperSU version 1.20 and onwards, the android.permission.ACCESS_SUPERUSER permission is declared by SuperSU."

  So it's a SuperSU deprecated permission, but leave it here anyways. Could be useful in some case.
